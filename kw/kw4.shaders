# vertex shader
# version 430

uniform mat4 MV;
uniform mat4 P;
uniform float pointsize;

layout (location=0) in vec3 position_vs;

flat out int vertexID_fs;

void main() {
  vertexID_fs = gl_VertexID;

  vec4 p = vec4(position_vs, 1);
  vec4 p_mv = MV * p;
  gl_Position = P * p_mv;

  gl_PointSize = pointsize / (-p_mv.z);
}

# fragment shader
# version 430

uniform ivec2 clickedPosition;

layout (origin_upper_left) in vec4 gl_FragCoord;
flat in int vertexID_fs;

out vec4 color_fb;

layout (std430, binding = 0) buffer SSB {
  float pick_z;
  uint  pick_oid;
};

void main() {
  vec3 normal = vec3(gl_PointCoord * 2.0 - 1.0, 0);
  normal.z = 1.0 - dot(normal.xy, normal.xy);
  if (normal.z < 0) discard;

  color_fb = vec4(vec3(sqrt(normal.z)) * 0.6, 0.4) + vec4(1, 1, 1, 1) * 0.5;

  if (/*gl_FragCoord.z < pick_z &&*/ distance(gl_FragCoord.xy, clickedPosition) < 1) {
    // pick_z = gl_FragCoord.z;
    pick_oid = vertexID_fs;
  }
}