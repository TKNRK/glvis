# vertex shader
# version 430

uniform mat4 MV;
uniform mat4 P;
uniform float pointsize;

layout (location=0) in vec3 position_vs;

flat out int   vertexID_fs;
flat out float vertexZ_fs;

void main() {
  vec4 p = vec4(position_vs, 1);
  vec4 p_mv = MV * p;
  gl_Position = P * p_mv;

  gl_PointSize = pointsize / (-p_mv.z);

  vertexID_fs = gl_VertexID;
  vertexZ_fs  = p_mv.z;
}

# fragment shader
# version 430

layout (origin_upper_left) in vec4 gl_FragCoord;
flat in int   vertexID_fs;
flat in float vertexZ_fs;

out vec4 color_fb;

layout (std430, binding = 0) buffer SSB {
  // Input fields
  uint  clicked_x, clicked_y;
  // Internal use
  float pick_z;
  int   pick_lock;
  // Output field
  int   pick_id;
};

const int Unlocked = 0, Locked = 1;

void main() {
  vec3 normal = vec3(gl_PointCoord * 2.0 - 1.0, 0);
  normal.z = 1.0 - dot(normal.xy, normal.xy);
  if (normal.z < 0) discard;

  color_fb = vec4(vec3(sqrt(normal.z)) * 0.6, 0.4) + vec4(1, 1, 1, 1) * 0.5;

  if (int(gl_FragCoord.x) == clicked_x && int(gl_FragCoord.y) == clicked_y) {
    while (pick_z < vertexZ_fs) {
      if (atomicCompSwap(pick_lock, Unlocked, Locked) == Unlocked) {
        pick_z = vertexZ_fs;
        pick_id = vertexID_fs;
        pick_lock = Unlocked;
      }
    }
  }
}