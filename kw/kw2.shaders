# vertex shader
# version 410

void main() {
  gl_Position = vec4(0, 0, .5, 1);
  gl_PointSize = 30;
}

# tessellation control shader
# version 410

layout (vertices = 3) out;

void main() {
  if (gl_InvocationID == 0) {
    gl_TessLevelInner[0] = 0;
    gl_TessLevelOuter[0] = 12;
    gl_TessLevelOuter[1] = 6;
    gl_TessLevelOuter[2] = 3;
  }
  gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}

# tessellation evaluation shader
# version 410

const float PI = 3.14159265359;

layout (triangles, equal_spacing, cw) in;

out vec4    color_fs;

void main() {
  vec3 T = gl_TessCoord;

  float t = 0;
  if      (T[0] < 1 / (gl_TessLevelOuter[0] + 1)) t = T[2];
  else if (T[1] < 1 / (gl_TessLevelOuter[1] + 1)) t = 1 + T[0];
  else if (T[2] < 1 / (gl_TessLevelOuter[2] + 1)) t = 2 + T[1];
  else t = -1;

  if (t >= 0) {
    float theta = PI * 2 * t / 3;
    gl_Position = vec4(cos(theta), sin(theta), 1, 1);
  } else {
    gl_Position = vec4(0, 0, 0, 1);
  }
  gl_Position = gl_Position + gl_in[0].gl_Position;
  color_fs    = gl_Position;
}

# fragment shader
# version 410

in  vec4 color_fs;
out vec4 color_fb;

void main() {
  color_fb = color_fs;
}
