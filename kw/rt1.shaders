# vertex shader
# version 430

const int max_delay = 20;
const vec2 gravity = vec2(0.0, -0.05);
const vec2 origin = vec2(0, -10);

uniform mat4 MV;
uniform mat4 P;
uniform float pointsize;

uniform float time;

out float transparency_fs;
out vec3 color_fs;

// Prime numbers for hash code generation
const uint P1 = 15485863, P2 = 32452843;

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }


void main() {
    float delay = max_delay * random(gl_VertexID);
    float t = time - delay;
    t = t - (floor(t / max_delay)) * max_delay;

    float sx = random(delay);
    float sy = random(sx);
    vec2 speed = vec2((sx - 0.5) * 2, (sy * sy * 0.3 + 0.2) * 5);

    vec4 p = vec4(origin + speed * t + gravity * t * t / 2, 0, 1);
    vec4 p_mv = MV * p;
    gl_Position = P * p_mv;

    gl_PointSize = pointsize;

    color_fs = vec3(0, 1, 1);
    transparency_fs = t < 0 ? 0 : 1 - t / max_delay;
}


# fragment shader
# version 430

in float transparency_fs;
in vec3 color_fs;

out vec4 color_fb;

void main() {
    vec3 normal = vec3(gl_PointCoord * 2.0 - 1.0, 0);
    normal.z = 1.0 - dot(normal.xy, normal.xy);
    if (normal.z < 0) discard;

    color_fb = vec4(vec3(sqrt(normal.z)) * 0.6, transparency_fs) + vec4(color_fs, 1) * 0.5;
}