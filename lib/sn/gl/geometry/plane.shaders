# vertex shader
# version 430

uniform mat4 MV;
uniform mat4 P;
uniform float t;

uniform vec3 worldlight;
const vec3 lightcolor = vec3(0.5, 0.5, 1);
const vec3 lightpos = vec3(3, 2, 4);

in  vec3 position_vs;
in  vec3 normal_vs;
out vec3 color_fs;

const vec3 colors[] = vec3[](
  vec3(0, 0, 1), vec3(0, 1, 0), vec3(0, 1, 1),
  vec3(1, 0, 0), vec3(1, 0, 1), vec3(1, 1, 0),
  vec3(0.6, 0.6, 0.6), vec3(0.8, 0.8, 0.8));

void main() {
  vec3 p = position_vs;
  float r2 = (p.x * p.x + p.z * p.z + max(t - 5, 0) / 30);
  float sigma2 = 0.1;
  p.y = (1 - r2 / (2 * sigma2)) * exp(-r2 / (2 * sigma2));

  vec3 normal = normalize(vec3(1, 0, 0)) + 0.001 * normal_vs;

  gl_Position = P * MV * vec4(p, 1);
  color_fs = 0.5 * colors[6 + gl_VertexID % 2] + 0.7 * lightcolor * max(dot(normal, normalize(-lightpos)), 0);
}

# fragment shader
# version 430

in  vec3 color_fs;
out vec4 color_fb;

void main() {
    color_fb = vec4(color_fs, 1) * (gl_FrontFacing ? 1 : 0.5);
}
