# vertex shader
# version 430

uniform mat4 MV;
uniform mat4 P;
uniform float t;

uniform vec3 worldlight;
const vec3 lightcolor = vec3(0.5, 0.5, 1);
const vec3 lightpos = vec3(3, 2, 4);

in  vec3 position_vs;
in  vec3 normal_vs;
out vec3 color_fs;

const vec3 colors[] = vec3[](
  vec3(0, 0, 1), vec3(0, 1, 0), vec3(0, 1, 1),
  vec3(1, 0, 0), vec3(1, 0, 1), vec3(1, 1, 0),
  vec3(0.6, 0.6, 0.6), vec3(0.8, 0.8, 0.8));

void main() {
  vec3 p = position_vs;
  //float t = 0;
  float r = 15 * length(position_vs);
  p.y = 0.5 * (r == 0 ? 1 : sin(r - t) / r);
  float d = cos(r - t) / r - sin(r - t) / r / r;
  vec3 normal = normalize(vec3(d, 1, d) + 0.001 * normal_vs);
  gl_Position = P * MV * vec4(p, 1);
  //color_fs = 0.3 * colors[6 + gl_VertexID % 2] + 0.7 * vec3(0.5, 0.5, 1) * max(dot(normal, vec3(0.4, 0.2, 0.4)), 0);
  color_fs = 0.5 * colors[6 + gl_VertexID % 2] + 0.7 * lightcolor * max(dot(normal, normalize(-lightpos)), 0);
}

# fragment shader
# version 430

in  vec3 color_fs;
out vec4 color_fb;

void main() {
    color_fb = vec4(color_fs, 1);
}
